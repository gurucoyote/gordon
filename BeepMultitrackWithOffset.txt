Aila: To achieve synchronized playback of multiple audio tracks with specific start offsets using the Beep library in Go, you can utilize the `Mixer` type provided by Beep. The `Mixer` allows you to combine multiple `Streamer` instances, enabling concurrent playback. By incorporating silence streamers as placeholders, you can control the start time of each track relative to the others.

**Implementation Steps:**

1. **Initialize the Mixer:**
   Create a new `Mixer` instance to manage the combined audio streams.

   ```go
   import (
       "github.com/gopxl/beep/v2"
       "github.com/gopxl/beep/v2/speaker"
       "time"
   )

   // Initialize the speaker with a sample rate and buffer size
   sampleRate := beep.SampleRate(44100)
   speaker.Init(sampleRate, sampleRate.N(time.Second/10))

   // Create a new Mixer
   mixer := &beep.Mixer{}
   ```


2. **Load Audio Streams:**
   Decode your audio files into `Streamer` instances.

   ```go
   import (
       "os"
       "github.com/gopxl/beep/v2/wav"
   )

   // Function to load an audio file
   func loadAudio(filePath string) (beep.StreamSeekCloser, beep.Format, error) {
       f, err := os.Open(filePath)
       if err != nil {
           return nil, beep.Format{}, err
       }
       streamer, format, err := wav.Decode(f)
       if err != nil {
           return nil, beep.Format{}, err
       }
       return streamer, format, nil
   }

   // Load your audio files
   streamer1, format1, err := loadAudio("path/to/audio1.wav")
   if err != nil {
       // Handle error
   }
   defer streamer1.Close()

   streamer2, format2, err := loadAudio("path/to/audio2.wav")
   if err != nil {
       // Handle error
   }
   defer streamer2.Close()
   ```


3. **Calculate Start Offsets:**
   Determine the desired start time for each track in seconds.

   ```go
   // Define start offsets in seconds
   offset1 := 0.0  // Start immediately
   offset2 := 5.0  // Start after 5 seconds
   ```


4. **Create Silence Streamers:**
   Generate silence streamers to fill the gap before each track starts.

   ```go
   // Function to create a silence streamer for a given duration
   func silence(duration float64, format beep.Format) beep.Streamer {
       numSamples := int(duration * float64(format.SampleRate))
       return beep.Silence(numSamples)
   }

   // Create silence streamers for each offset
   silence1 := silence(offset1, format1)
   silence2 := silence(offset2, format2)
   ```


5. **Sequence Silence and Audio Streams:**
   Combine the silence and audio streamers to align the start times.

   ```go
   // Sequence silence and audio streamers
   seq1 := beep.Seq(silence1, streamer1)
   seq2 := beep.Seq(silence2, streamer2)
   ```


6. **Add to Mixer and Play:**
   Add the sequenced streamers to the mixer and initiate playback.

   ```go
   // Add sequences to the mixer
   mixer.Add(seq1)
   mixer.Add(seq2)

   // Play the mixed stream
   speaker.Play(mixer)
   ```


**Considerations:**

- **Sample Rate Consistency:** Ensure all audio files have the same sample rate to prevent playback issues. If they differ, use Beep's `Resample` function to adjust them to a common sample rate.

- **Error Handling:** Implement proper error handling for file operations and audio processing to ensure robustness.

By following these steps, you can achieve synchronized playback of multiple audio tracks with specified start offsets using the Beep library in Go. 

----------------------------------
Task-Based Implementation Plan

1. Define New Data Structures
   - Create a new file "cmd/multitrack.go".
   - Define a struct 'track' with fields:
         streamer beep.StreamSeeker
         offset   float64
     And a struct 'multitrackPanel' with fields:
         mixer      *beep.Mixer
         sampleRate beep.SampleRate
         tracks     []track

2. Implement Support Functions
   - Implement loadTrack(file string, offset float64) (beep.StreamSeeker, beep.Format, error) using your existing file loading logic.
   - Implement createSilentStreamer(offset float64, format beep.Format) beep.Streamer to generate silence based on the given offset.
   - Implement buildSequencedStreamer(offset float64, streamer beep.StreamSeeker, format beep.Format) beep.Streamer by sequencing silence and audio using beep.Seq.
   - Add a method AddTrack(file string, offset float64) error on multitrackPanel that loads a track and adds it to the mixer.

3. Create a New Cobra Command
   - Add a new command "multitrack" to your command tree that accepts file/offset pairs.
   - In the command's Run function, initialize a multitrackPanel, loop through each file and offset pair (e.g. "app multitrack track1.mp3 0 track2.wav 5"), add each track, and then start playback using speaker.Play(mPanel.mixer).

4. Integrate with Existing Infrastructure
   - Reuse the existing speaker initialization from cmd/root.go.
   - Maintain separation of concerns by keeping multitrack functionality separate from the single-track audioPanel.

5. Testing and Documentation
   - Test with multiple audio files and various offsets to ensure proper synchronization.
   - Update the README and other documentation with usage examples and detail any limitations (e.g., ensuring sample rate consistency).

----------------------------------

